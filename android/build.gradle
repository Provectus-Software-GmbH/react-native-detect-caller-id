buildscript {
    ext.kotlinVersion = '2.0.20' // Change here
    repositories {
        mavenCentral()
        google()
    }

    dependencies {
      classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion")
      classpath 'com.android.tools.build:gradle:8.1.0'
    }
}

def getExtOrDefault(name, defaultValue) {
    return rootProject.ext.has(name) ? rootProject.ext.get(name) : defaultValue
}

def isNewArchitectureEnabled() {
    // To opt-in for the New Architecture, you can either:
    // - Set `newArchEnabled` to true inside the `gradle.properties` file
    // - Invoke gradle with `-newArchEnabled=true`
    // - Set an environment variable `ORG_GRADLE_PROJECT_newArchEnabled=true`
    return project.hasProperty("newArchEnabled") && project.newArchEnabled == "true"
}

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

if (isNewArchitectureEnabled()) {
    apply plugin: "com.facebook.react"
}

android {
    def agpVersion = com.android.Version.ANDROID_GRADLE_PLUGIN_VERSION
    if (agpVersion.tokenize('.')[0].toInteger() >= 7) {
        namespace "berlin.prototype.callerid"
        buildFeatures {
            buildConfig true
        }
    }

    compileSdkVersion getExtOrDefault('compileSdkVersion', 31)

    // Used to override the NDK path/version on internal CI or by allowing
    // users to customize the NDK path/version from their root project (e.g. for M1 support)
    if (rootProject.hasProperty("ndkPath")) {
        ndkPath rootProject.ext.ndkPath
    }
    if (rootProject.hasProperty("ndkVersion")) {
        ndkVersion rootProject.ext.ndkVersion
    }

    defaultConfig {
        minSdkVersion getExtOrDefault('minSdkVersion', 24)
        targetSdkVersion getExtOrDefault('targetSdkVersion', 31)
        versionCode 16
        versionName "1.8"

        buildConfigField "boolean", "IS_NEW_ARCHITECTURE_ENABLED", isNewArchitectureEnabled().toString()

        ndk {
            abiFilters (*reactNativeArchitectures())
        }
    }
    lintOptions {
        abortOnError false
    }
}

def reactNativeArchitectures() {
    def value = project.getProperties().get("reactNativeArchitectures")
    return value ? value.split(",") : [
        "armeabi-v7a",
        "x86",
        "x86_64",
        "arm64-v8a"
    ]
}

repositories {
    mavenCentral()
    google()
}

dependencies {
    implementation 'com.facebook.react:react-native:0.20.1'
    implementation 'com.google.code.gson:gson:2.11.0'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation "androidx.core:core-ktx:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation 'androidx.core:core:1.15.0'
}
